Netty协议栈功能设计：
Netty协议栈用于内部各模块之间的通信，它基于TCP/IP协议栈，是一个类HTTP协议的应用层协议栈，相比于传统的标准协议栈，它更加轻巧、灵活和实用。
1．协议栈功能描述
	Netty协议栈承载了业务内部各模块之间的消息交互和服务调用，它的主要功能如下：
	（1） 基于Netty的NIO通信框架，提供高性能的异步通信能力；
	（2） 提供消息的编解码框架，可以实现POJO的序列化和反序列化；
	（3） 提供基于IP地址的白名单接入认证机制；
	（4） 链路的有效性校验机制；
	（5） 链路的断连重连机制；
2．通信模型
	Netty协议栈通信模型如图所示：
	（1）Netty协议栈客户端发送握手请求消息，携带节点ID等有效身份认证；
	（2）Netty协议栈服务端对握手请求消息进行合法性校验，包括节点ID有效性校验、节点重复登录校验和IP地址合法性校验，校验通过后，返回登录成功的握手
	应答消息；
	（3）链路建立成功之后，客户端发送业务消息；
	（4）链路成功之后，服务端发送心跳消息；
	（5）链路建立成功之后，客户端发送心跳消息；
	（6）链路建立成功之后，服务端发送业务消息；
	（7）服务端退出时，服务端关闭连接，客户端感知对方关闭连接后，被动关闭客户端连接
备注：需要指出的是，Netty协议通信双方链路建立成功之后，双方可以进行全双工通信，无论客户端还是服务器端，都可以主动发送请求消息给对方，通信方式可以是
TWO WAY或者ONE WAY。双方之间的心跳采用Ping-Pong机制，当链路处于空闲状态时，客户端主动发送Ping消息给服务端，服务端接收到Ping消息后发送应答消息
Pong给客户端，如果客户端连续发送N条Ping消息都没有接收到服务端返回的Pong消息，说明链路已经挂死或者对方出入异常状态，客户端主动关闭连接，间隔周期T
后发起重连操作，知道重连成功。

五、链路的建立
Netty协议栈支持服务端和客服端，对于使用Netty协议栈的应用程序而言，不需要刻意区分到底是客户端还是服务器端，在分布式组网环境中，一个节点可能既是客户端也是服务器端，这个依据具体的用户场景而定。
Netty协议栈对客户端的说明如下：如果A节点需要调用B节点的服务，但是A和B之间还没有建立物理链路，则有调用方主动发起连接，此时，调用方为客户端，被调用方为服务端。
考虑到安全，链路建立需要通过基于Ip地址或者号段的黑白名单安全认证机制，作为样例，本协议使用基于IP地址的安全认知，如果有多个Ip，通过逗号进行分割。在实际的商用项目中，安全认证机制会更加严格，例如通过密钥对用户名和密码进行安全认证。
客户端与服务端链路建立成功之后，由客户端发送握手请求消息，握手请求消息的定义如下
	（1） 消息头的type字段值为3；
	（2） 可选附件数为0；
	（3） 消息头为空
	（4） 握手消息的长度为22个字节
服务端接收到客户端的握手请求消息之后，如果IP校验通过，返回握手成功应答消息给客户端，应用层链路建立成功。握手应答消息定义如下：
	（1）消息头的type字段值为4
	（2）可选附件个数为0；
	（3）消息体为byte类型的结果，0：认证成功；-1认证失败；
链路建立成功之后，客户端和服务端就可以互相发送业务消息了。

六、链路的关闭
由于采用长连接通信，在正常的业务运行期间，双方通过心跳和业务消息维持链路，任何一方都不需要主动关闭连接。
但是，在以下情况下，客户端和服务端需要关闭连接：
	（1）当对方宕机或者重启时，会主动关闭链路，另一方读取到操作系统的通知信号，得知对方REST链路，需要关闭连接，释放自身的句柄等资源。由于采用TCP全
	双工通信，通信双方都需要关闭连接，释放资源；
	（2）消息读写过程中，发生了I/O异常，需要主动关闭连接；
	（3）心跳消息读写过程发生了I/O异常，需要主动关闭连接；
	（4）心跳超时，需要主动关闭连接；
	（5）发生编码异常等不可恢复错误时，需要主动关闭连接。

七、可靠性设计
	Netty协议栈可能会运行在非常恶劣的网络环境中，网络超时、闪断、对方进程僵死或者处理缓慢等情况都有可能发生。为了保证在这些极端异常场景下Netty协议
	栈仍能够正常工作或者自动恢复，需要对他的可靠性进行统一规划和设计。

	7.1心跳机制
	在凌晨等业务低谷时段，如果发生网络闪断、连接被Hang住等问题时，由于没有业务消息，应用程序很难发现。到了白天业务高峰期时，会发生大量的网络通信失
	败，严重的会导致一段时间进程内无法处理业务消息。为了解决这个问题，在网络空闲时采用心跳机制来检测链路的互通性，一旦发现网络故障，立即关闭链路，
	主动重连。
	具体的设计思路如下：
		（1）当网络处于空闲状态持续时间达到T（连续周期T没有读写消息）时，客户端主动发送Ping心跳消息给服务端；
		（2）如果在下一个周期T到来时客户端没有收到对方发送的Pong心跳应答消息或者读取到服务端发送的其他业务消息，则心跳失败计数器加1；
		（3）每当客户端接收到服务的业务消息或者Pong应答消息，将心跳失败计数器清零；当练习N次没有接收到服务端的Pong消息或者业务消息，则关闭链路，
		间隔INTERVAL时间后发起重连操作；
		（4）服务端网络空闲状态持续时间达到T后，服务端将心跳失败计数器加1；只要接收到客户端发送的Ping消息或者其他业务消息，计数器清零；
		（5）服务端连续N次没有接收到客户端的ping消息或者其他业务消息，则关闭链路，释放资源，等到客户端重连。
	通过Ping-Pong双向心跳机制，可以保证无论通信哪一方出现网络故障，都能被及时的检查出来，为了防止由于对方短时间内繁忙没有及时返回应答造成的误判，
	只有连续N次心跳检查都失败才认定链路已经损害，需要关闭链路并重建链路。
	当读或者写心跳消息发生I/O异常的时候，说明已经中断，此时需要立即关闭连接，如果是客户端，需要重新发起连接。如果是服务端，需要清空缓存的半包信息，
	等到客户端重连。

	7.2重连机制
	如果链路中断，等到INTEVAL时间后，由客户端发起重连操作，如果重连失败，间隔周期INTERVAL后再次发起重连，直到重连成功。
	为了保持服务端能够有充足的时间释放句柄资源，在首次断连时客户端需要等待INTERVAL时间之后再发起重连，而不是失败后立即重连。
	为了保证句柄资源能够及时释放，无论什么场景下重连失败，客户端必须保证自身的资源被及时释放，包括但不现居SocketChannel、Socket等。
	重连失败后，需要打印异常堆栈信息，方便后续的问题定位。

	7.3重复登录保护
	当客户端握手成功之后，在链路处于正常状态下，不允许客户端重复登录，以防止客户端在异常状态下反复重连导致句柄资源被耗尽。
	服务端接收到客户端的握手请求消息之后，首先对IP地址进行合法性校验，如果校验成功，在缓存的地址表中查看客户端是否已经登录，如果登录，则拒绝重复登
	录，返回错误码-1，同时关闭TCP链路，并在服务端的日志中打印握手失败的原因。
	客户端接收到握手失败的应答消息之后，关闭客户端的TCP连接，等待INTERVAL时间之后，再次发起TCP连接，知道认证成功。
	为了防止由服务端和客户端对链路状态理解不一致导致的客户端无法握手成功问题，当服务端连续N次心跳超时之后需要主动关闭链路，清空改客户端的地址缓存信
	息，以保证后续改客户端可以重连成功，防止被重复登录保护机制拒绝掉。

	7.4消息缓存重发
	无论客户端还是服务端，当发生链路中断之后，在链路恢复之前，缓存的消息队列中待发送的消息不能丢失，等链路恢复之后，重新发送这些消息，保证链路中断期
	间消息不丢失。
	考虑到内存溢出的风险，建议消息缓存队列设置上限，当达到上限之后，应该拒绝继续想该队列添加新的消息。