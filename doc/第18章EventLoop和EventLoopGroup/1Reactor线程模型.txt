单线程模型：指所有的nio操作都在同一个nio线程上面完成。nio线程职责如下：
	1、作为nio服务器，接收客户端的tcp连接
	2、作为nio客户端，向服务端发起tcp连接
	3、读取通信对端的请求或者应答信息
	4、向通信对端发送消息请求或者应答消息

由于reactot模式使用的是异步非阻塞io模型，所有的io操作都不会阻塞，理论上一个线程可以处理所有io操作。例如，通过Acceptor类接收客户端的tcp连接请求，
当链路建立成功后，通过Dispatch将对应的ByteBuffer派发到指定的Handler上，进行消息解码，用户线程消息编码后通过nio线程将消息发送给客户端。

多线程模型特点：
	1、有专门一个nio线程——Acceptor线程用于监听服务端，接收客户端的tcp连接请求
	2、网络io操作——读、写等由一个nio线程池负责，线程池可以采用标准的jdk线程池实现，它包含了一个任务队列和n个可用的线程，由这些nio线程负责消息的读取、解码、编码和发送
	3、一个nio线程可以同时处理n条链路，但是一个链路只对应一个nio线程，防止发生并发操作问题
大多数场景下，多线程模型可以满足性能需求，但是，在个别场景下，一个nio线程负责监听和处理所有的客户端连接可能存在性能问题，例如并发百万的客户端连接，或者服务端需要对客户端握手进行安全认证，
但是认证本身非常损耗性能，在这类场景下，单独一个Acceptor线程可能存在性能不足的问题。
	
主从reactor多线程模型
	主从reactor线程模型的特点是：服务端用于接收客户端连接的不再是一个单独的nio线程，而是一个独立的nio线程池。Acceptor接收到客户端tcp连接请求并处理完成后（可能包含接入认证
	等），将新创建的SocketChannel注册到io线程池(sub reactor线程池)的某个io线程上，由它负责SocketChannel的读写和编解码工作。Acceptor线程池仅仅用于客户端
	的登录、握手和安全认证，一旦链路建立成功，就将链路注册到后端sub reactor线程池的io线程上，由io线程负责后续的io操作。