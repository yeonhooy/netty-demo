netty可以支持单线程模型、多线程模型、主从reactor多线程模型

服务端启动的时候，创建了两个NioEventLoopGroup，他们实际是两个独立的reactor线程池。一个用于接收客户端的tcp连接，一个用于处理io相关的读写操作，或者执行系统task、定时任务
task等。

netty用于接收客户端请求的线程池职责如下：
	1、接收客户端tcp连接，初始化Channel参数
	2、将链路状态变更事件通知给ChannelPipeline
netty用于处理io操作的reactor线程池职责如下：
	1、异步读取通信对端的数据报，发送读事件到ChannelPipeline
	2、异步发送消息到通信对端，调用ChannelPipeline的消息发送接口
	3、执行系统调用task
	4、执行定时任务task，例如链路空闲状态监测定时任务
	
netty多线程编程的最佳实践：
	1、创建两个NioEventLoopGroup，用于逻辑隔离nio acceptor和nio io线程。
	2、尽量不要在ChannelHandler中启动用户线程（解码后用于将pojo消息派发到后端业务线程的除外）
	3、解码要放在nio线程调用的解码Handler中进行，不要切换到用户线程中完成消息的解码
	4、如果业务逻辑操作非常简单，没有复杂的业务逻辑计算，没有可能会导致线程阻塞的磁盘操作、数据库操作、网络操作等，可以直接在nio线程上完成业务逻辑编排，不需要切换到用户线程
	5、如果业务逻辑处理复杂，不要在nio线程上完成，建议将解码后的pojo消息封装成task，派发到业务线程池中由业务线程执行，以保证nio线程尽快被释放，处理其他的io操作