分为两类：
	1、堆内存HeapByteBuf字节缓冲区：特点是内存的分配和回收速度快，可以被jvm自动回收，缺点是如果进行socket的io读写，需要额外做一次内存复制，将堆内存对应的缓冲区复制到内核
	Channel中，性能会有一定程度的下降
	2、直接内存DirectByteBuf字节缓冲区：非堆内存，它在堆外进行内存分配，相比于堆内存，它的分配和回收速度回慢一些，但是将它写入或者从socket Channel中读取时，由于少了一次
	内存复制，速度比堆内存块
	正是因为各有利弊，经验表明ByteBuf的最佳实践是在io通信线程的读写缓冲区使用DirectByteBuf，后端业务消息的编解码模块使用HeapByteBuf，这样组合可以达到最佳。
	
从内存回收角度看，ByteBuf也分为两类：
	1、基于对象池的ByteBuf和普通ByteBuf，两者的区别就是基于对象池的ByteBuf可以重用ByteBuf对象，他自己维护了一个内存池，可以循环利用创建的ByteBuf，提升内存的使用
	效率，降低由于高负载导致的频繁gc。测试表明使用内存池后的netty在高负载、大并发的冲击下内存和gc更加平稳。