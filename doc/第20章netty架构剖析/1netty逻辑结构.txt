三层架构：
	1、Service
	2、pipeline
	3、reactor

reactor通信调度层：
	它由一系列辅助类完成，包括Reactor线程NioEventLoop及其父类，NioSocketChannel/NioServerSocketChannel及其父类，ByteBuffer以及由其衍生出来的
	各种Buffer，Unsafe以及其衍生出的各种内部类等。该层的主要职责就是监听网络的读写和连接操作，负责将网络层的数据读取到内存缓冲区中，然后触发各种网络事件，例如连接创建、连接激活、
	读事件、写事件等，将这些事件触发到PipeLine中，由PipeLine管理的职责链来进行后续的处理。

职责链ChannelPipeline：
	他负责事件在职责链中的有序传播，同时负责动态的编排职责链。职责链可以选择监听和处理自己关心的事件，他可以拦截处理和向后/向前传播事件。不同应用的Handler节点的功能也不同，通常情况
	下，往往会开发编解码Handler用于消息的编解码，他可以将外部的协议消息转换成内部的pojo对象，这样上层业务则只需要关心处理业务逻辑即可，不需要感知底层的协议差异和线程模型差异，实现
	了架构层面的分层隔离。
	
业务逻辑编排层：
	通常有两类：一类是纯粹的业务逻辑编排，还有一类是其他的应用层协议插件，用于特定协议相关的会话和链路管理。例如CMPP协议，用于管理和中国移动短息系统的对接。