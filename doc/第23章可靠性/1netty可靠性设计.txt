1、客户端连接超时：
	Bootstrap b = new Bootstrap();
	b.group(group).channel(NioSocketChannel.class).option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 3000);

2、通信对端强制关闭连接：
	在客户端和服务端正常通信的过程中，如果发生网络闪断，对方进程宕机或者其他非正常关闭链路事件时，tcp链路就会发生异常，由于tcp是全双工的，通信双方
	都需要关闭和释放Socket句柄才不会发生句柄的泄露。
	客户端强制关闭，服务端报错：远程主机强迫关闭了一个现有的连接。但我们从堆栈信息看，服务端已经监控到客户端强制关闭了连接，释放了句柄。

3、链路关闭：
	对于短连接协议，例如http，通信双方数据交互完毕后，通常按照双方的约定由服务端关闭连接，客户端获得tcp连接关闭请求后，关闭自身的Socket连接，双方
	正式断开连接。
	在实际的nio编程中，经常存在一个误区：认为只要是对方关闭连接，就会发生io异常，捕获io异常之后再关闭连接即可。实际上，连接合法关闭不会发生io异常，
	它是一种正常情况，如果遗漏了该场景的判断和处理就会导致连接句柄泄露。
	netstat -ano|find "8080"

4、定制io异常：
	大多数场景，当底层网络发生故障时，由底层的io框架释放资源，处理异常等，上层业务不需要关心底层处理细节，但是一些特殊场景下，用户可能需要感知这些
	异常，并针对异常进行定制处理。
	1、客户端的断连重连机制
	2、消息的缓存重发
	3、接口日志中详细记录故障细节
	4、运维相关功能，例如告警、触发邮件/短信等
	netty的异常处理策略是发生io异常，底层的资源由它释放，同时将异常堆栈信息以事件的形式通知给上层用户，由用户对异常进行定制。
	@Override
	punlic void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {
		ctx.fireExceptionCaught(cause);
	}